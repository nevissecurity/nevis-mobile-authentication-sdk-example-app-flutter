##
## Fastlane configuration for the Nevis Mobile Authentication SDK Example App Flutter Android application.
## See https://docs.fastlane.tools
##

default_platform(:android)

root_dir = File.expand_path(File.join(File.dirname(__FILE__), "../"))
signing_configs_gradle = File.join(root_dir, "app/signing_configs.gradle")
apk_path = File.join(root_dir, "../build/app/outputs/flutter-apk/app-debug.apk")
display_name = "Nevis Mobile Authentication SDK Example App Flutter Android"
android_manifest = File.join(root_dir, "app/src/main/AndroidManifest.xml")
app_build_gradle = File.join(root_dir, "app/build.gradle")
build_gradle = File.join(root_dir, "build.gradle")
public_maven_repository = "https://maven.pkg.github.com/nevissecurity/nevis-mobile-authentication-sdk-android-package"

def report_on_success(message)
	slack(
		message: "#{message}\nCheck build logs: #{ENV['CURRENT_BUILD_URL']}",
		slack_url: ENV['SLACK_WEBHOOK_URL']
	) if ENV['SLACK_WEBHOOK_URL']
end

def report_on_error(message, exception)
	slack(
		message: "#{message}\nCheck build logs: #{ENV['CURRENT_BUILD_URL']}",
		slack_url: ENV['SLACK_WEBHOOK_URL'],
		success: false,
		attachment_properties: {
			fields: [
				{
					title: "Error message",
					value: exception.to_s,
					short: false
				}
			]
		}
	) if ENV['SLACK_WEBHOOK_URL']
	UI.user_error!("#{exception}")
end

platform :android do
	desc "Pull request build"
	desc ""
	lane :pr do |options|
		utilize_private_repos
		build
	end

	desc "Continuous build"
	desc "#### Options"
	desc " * **`version`**: The version of the application."
	desc " * **`build_number`**: The build number of the application."
	desc ""
	lane :develop do |options|
		utilize_private_repos
		distribute(options)
	end

	desc "Release build"
	desc "#### Options"
	desc " * **`version`**: The version of the application."
	desc " * **`build_number`**: The build number of the application."
	desc ""
	lane :main do |options|
		distribute(options)
	end

	####
	#### Private lanes
	####

	desc "Utilize private repositories"
	desc ""
	private_lane :utilize_private_repos do
		private_maven_repository = ENV["PRIVATE_NATIVE_REPOSITORY"]
		modify_file(
			file_path: build_gradle,
			old_value: "url \"#{public_maven_repository}\"",
			new_value: "url \"#{private_maven_repository}\"",
		) if private_maven_repository
	end

	desc "Build the application"
	desc ""
	private_lane :build do
		sh('flutter build apk --debug')
	end

	desc "Distribute the application"
	desc "#### Options"
	desc " * **`version`**: The version of the application."
	desc " * **`build_number`**: The build number of the application."
	desc ""
	private_lane :distribute do |options|
		begin
			version = options[:version]
			build_number = options[:build_number]
			UI.message("Distributing #{display_name} #{version} (#{build_number}) 📦")

			sh("echo \"#{ENV["SIGNING_CONFIGS"]}\" > #{signing_configs_gradle}")

			modify_file(
				file_path: app_build_gradle,
				old_value: "signingConfig signingConfigs.debug",
				new_value: "signingConfig signingConfigs.signing",
			)

			modify_file(
				file_path: app_build_gradle,
				old_value: "android {",
				new_value: "apply from: 'signing_configs.gradle'\n",
				mode: 'prepend'
			)

			build

			firebase_app_distribution(
				app: ENV["FIREBASE_APP_ID_ANDROID"],
				apk_path: apk_path,
				groups: 'developers, internal-testers, presales'
			)
			report_on_success("#{display_name} build is completed: #{version} (#{build_number}) ✅")
		rescue => exception
			report_on_error("#{display_name} build failed ❌", exception)
		end
	end
end
