##
## Fastlane configuration for the Nevis Mobile Authentication SDK Example App Flutter iOS application.
## See https://docs.fastlane.tools
##

require 'securerandom'

default_platform(:ios)

app_identifier = "ch.nevis.mobile.authentication.sdk.flutter.example"
display_name = "Nevis Mobile Authentication SDK Example App Flutter iOS"
keychain_password = SecureRandom.base64
ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "120"

def ensure_temp_keychain(name, password)
	delete_temp_keychain(name)
	create_temp_keychain(name, password)
end

def create_temp_keychain(name, password)
	create_keychain(
		name: name,
		password: password,
		unlock: true,
		timeout: 0,
		lock_when_sleeps: true
	)
end

def delete_temp_keychain(name)
	delete_keychain(
		name: name
	) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def report_on_success(message)
	slack(
		message: "#{message}\nCheck build logs: #{ENV['CURRENT_BUILD_URL']}",
		slack_url: ENV['SLACK_WEBHOOK_URL']
	) if ENV['SLACK_WEBHOOK_URL']
end

def report_on_error(message, exception)
	slack(
		message: "#{message}\nCheck build logs: #{ENV['CURRENT_BUILD_URL']}",
		slack_url: ENV['SLACK_WEBHOOK_URL'],
		success: false,
		attachment_properties: {
			fields: [
				{
					title: "Error message",
					value: exception.to_s,
					short: false
				}
			]
		}
	) if ENV['SLACK_WEBHOOK_URL']
	UI.user_error!("#{exception}")
end

platform :ios do
	desc "Build and distribute the application"
    desc "#### Options"
    desc " * **`version`**: The version of the application."
    desc " * **`build_number`**: The build number of the application."
    desc ""
	lane :main do |options|
		begin
    		version = options[:version]
	    	build_number = options[:build_number]

			keychain_name = ENV["TEMP_KEYCHAIN_NAME"]
			ensure_temp_keychain(
				keychain_name,
				keychain_password
			)

			UI.message("Distributing #{display_name} #{version} (#{build_number}) 📦")

			match(
				type: "adhoc",
				readonly: true,
				app_identifier: app_identifier,
				git_url: ENV["MATCH_GIT_URL"],
				git_basic_authorization: Base64.strict_encode64(ENV["MATCH_GIT_AUTHORIZATION"]),
				git_branch: "main",
				keychain_name: keychain_name,
				keychain_password: keychain_password
			)

			profile_name = ENV["sigh_#{app_identifier}_adhoc_profile-name"]
			update_code_signing_settings(
				path: "Runner.xcodeproj",
				build_configurations: ["Release"],
				use_automatic_signing: false,
				team_id: ENV["DEVELOPER_PORTAL_TEAM_ID"],
				code_sign_identity: ENV["CODE_SIGNING_IDENTITY"],
				profile_name: profile_name,
			)

			gym(
				workspace: "Runner.xcworkspace",
				scheme: "Runner",
				configuration: "Release",
				clean: true,
				skip_profile_detection: true,
				skip_package_dependencies_resolution: true,
				export_method: "ad-hoc",
				export_options: {
					provisioningProfiles: {
						app_identifier => ENV["PROVISIONING_PROFILE_SPECIFIER"]
					}
				},
				xcargs: "OTHER_CODE_SIGN_FLAGS=\"--keychain=#{keychain_name}\""
			)

			firebase_app_distribution(
				app: ENV["FIREBASE_APP_ID_IOS"],
				ipa_path: "./Runner.ipa",
				groups: "developers, internal-testers, presales"
			)

			delete_temp_keychain(keychain_name)
			report_on_success("#{display_name} build is completed: #{version} (#{build_number}) ✅")
		rescue => exception
			delete_temp_keychain(keychain_name)
			report_on_error("#{display_name} build failed ❌", exception)
		end
	end
end
